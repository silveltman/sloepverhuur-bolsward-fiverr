<div class="carousel"
  x-data="{
    skip: 1,
    next() {
      this.to((current, offset) => current + (offset * this.skip))
    },
    prev() {
      this.to((current, offset) => current - (offset * this.skip))
    },
    to(strategy) {
      let slider = this.$refs.slider
      let current = slider.scrollLeft
      let offset = slider.firstElementChild.getBoundingClientRect().width
      
      this.$refs.slider.scrollTo({ left: strategy(current, offset), behavior: 'smooth' })
    },
    focusableWhenVisible: {
      'x-intersect:enter'() {
        this.$el.removeAttribute('tabindex')
      },
      'x-intersect:leave'() {
        this.$el.setAttribute('tabindex', '-1')
      },
    }
  }"
  @keydown.left="prev"
  @keydown.right="next"
>
  <button @click="prev" class="carousel__btn carousel__btn--prev "> ❮ </button>

  <ul x-ref="slider" class="carousel__list" tabindex="0">

    {%- comment -%}
    {% for item in list %}
      <li class="carousel__item">
        {% bookshop "card/base" bind: item.data %}  
      </li>
    {% endfor %}
    
    {% assign collection_count = list.size | minus: 1  %}
    {% for i in (0..collection_count) %}
    {% assign item = collections.sloepen[i]  %}
    {% bookshop "card/small" bind: item.data  %}
    {% endfor %}
    {%- endcomment -%}
  </ul>

  <button @click="next" class="carousel__btn carousel__btn--next"> ❯ </button>
</div>